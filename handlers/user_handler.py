from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state

from config_data.config import Config, load_config
from keyboards.user_keyboard import main_menu, keyboards_get_phone, keyboards_manager_link, keyboards_chanel_link, \
    keyboards_back_main_menu
from module.data_base import create_table_users, add_user

import requests
import logging


router = Router()
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()


class Register(StatesGroup):
    name = State()
    age = State()
    number = State()


user_dict = {}


def get_telegram_user(user_id, bot_token):
    url = f'https://api.telegram.org/bot{bot_token}/getChat'
    data = {'chat_id': user_id}
    response = requests.post(url, data=data)
    print(response.json())
    return response.json()


@router.message(CommandStart())
async def process_start_command_user(message: Message) -> None:
    logging.info(f'process_start_command_user: {message.chat.id}')
    create_table_users()
    add_user(id_user=message.chat.id, user_name=message.from_user.username)
    await message.answer(
        text=f"üôç<b>{message.from_user.first_name}</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?üèÆ",
        reply_markup=main_menu(),
        parse_mode='html')


@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å —É–≥–æ–ª—å üí∑")
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer(text="üí¨–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.age)
    await message.answer(text="üí¨–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")


@router.message(Register.age)
async def register_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Register.number)
    await message.answer(text="üí¨–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                         reply_markup=keyboards_get_phone())


@router.message(Register.number, F.contact)
async def register_number(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number)
    user_dict[message.chat.id] = await state.get_data()
    await message.answer(text=f'üìö–í–∞—à–µ –∏–º—è: {user_dict[message.chat.id]["name"]}\n'
                              f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {user_dict[message.chat.id]["age"]}\n'
                              f'–ù–æ–º–µ—Ä: {user_dict[message.chat.id]["number"]}')
    await state.clear()


@router.message(F.text == "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚òéÔ∏è")
async def links(message: Message):
    await message.answer(text="‚úäüèª–í–æ—Ç c –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
                         reply_markup=keyboards_manager_link())


@router.message(F.text == "–ù–∞—à –∫–∞–Ω–∞–ª üßß")
async def links_channel(message: Message):
    logging.info("links_channel")
    await message.answer(f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª:", reply_markup=keyboards_chanel_link())


@router.message(F.text == "–û –Ω–∞—Å‚ùì")
async def links_about(message: Message):
    logging.info("links_about")
    await message.answer(text=f"Coco-coal:\n"
                              f"üëâüèª–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–≥–æ–ª—å, –∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞—Ä–∞–≤–Ω–µ —Å —Ç–∞–∫–∏–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏, –∫–∞–∫ –ö—Ä–∞—É–Ω –∏ –ö–æ–∫–æ–ª–æ–∫–æ. \n"
                              f"üëâüèª–ú—ã –¥–æ–ª–≥–æ —Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–º, —Å—Ç—Ä–µ–º—è—Å—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ.\n"
                              f"üëâüèª–£–≥–æ–ª—å –Ω–∞–∏–≤—ã—Å—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –≤ –¢–∏—Ö–æ–º –æ–∫–µ–∞–Ω–µ. –°–¥–µ–ª–∞–Ω –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∞ –∏–º–µ–Ω–Ω–æ, –∏–∑ –ª—É—á—à–∏—Ö —Å–æ—Ä—Ç–æ–≤ –∫–æ–∫–æ—Å–æ–≤–æ–π —Å–∫–æ—Ä–ª—É–ø—ã.\n"
                              f"üëâüèª–ò–¥–µ–∞–ª—å–Ω–∞—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –∫—É–±–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –¥–æ–ª–≥–æ–µ –≥–æ—Ä–µ–Ω–∏–µ, –∞ —Å–æ—Å—Ç–∞–≤ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏ –≤—ã–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫–∞–ª—å—è–Ω–æ–º –∏ –µ–≥–æ –≤–∫—É—Å–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–∏–º–µ—Å–µ–π –∏ –∑–∞–ø–∞—Ö–æ–≤.\n",
                         reply_markup=keyboards_back_main_menu())


@router.callback_query(F.data == "main_menu")
async def links_about(callback: CallbackQuery):
    logging.info("links_about")
    await callback.message.answer(text=f"üôç<b>{callback.from_user.first_name}</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?üèÆ",
                                  reply_markup=main_menu(),
                                  parse_mode='html')